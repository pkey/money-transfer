/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package com.revolut.task

import com.revolut.task.exception.BalanceNegativeException
import com.revolut.task.exception.NegativeTransferAmountException
import com.revolut.task.exception.SelfTransferException
import spock.lang.Specification
import com.revolut.task.model.Account

class AccountServiceTest extends Specification {

    AccountService service;
    AccountRepository repository;

    def setup() {
        repository = Mock(AccountRepository)
        service = new AccountService(repository)
    }

    def "creates new account"() {
        when:
        def account = service.createAccount()

        then:
        1 * repository.createAccount() >> new Account()
        account != null
        account instanceof Account
    }

    def "returns an account"() {
        when:
        def account = service.getAccount("id")

        then:
        1 * repository.getAccount("id") >> new Account("id")
        account != null
        account instanceof Account
    }

    def "deletes an account"() {
        when:
        def result = service.deleteAccount("id")

        then:
        1 * repository.deleteAccount("id") >> new Account("id")
        result != null
        result instanceof Account
    }

    def "updates an account balance"() {
        when:
        def result = service.updateAccount("id", new BigDecimal(1))

        then:
        1 * repository.updateAccount("id", new BigDecimal(1)) >> new Account("id", new BigDecimal(1))
        result != null
        result instanceof Account
        result.balance == new BigDecimal(1)
    }

    def "transfers money from one account to another"() {
        given:
        Account accountFrom = new Account(new BigDecimal(10))
        Account accountTo = new Account()

        when:
        service.transferMoney(accountFrom.getId(), accountTo.getId(), new BigDecimal(10))

        then:
        1 * repository.getAccount(accountFrom.getId()) >> accountFrom
        1 * repository.getAccount(accountTo.getId()) >> accountTo
        1 * repository.updateAccount(accountFrom.getId(), new BigDecimal(0))
        1 * repository.updateAccount(accountTo.getId(), new BigDecimal(10))
    }

    def "throws exception when it would result in negative balance"() {
        given:
        Account accountFrom = new Account(new BigDecimal(0))
        Account accountTo = new Account()

        when:
        service.transferMoney(accountFrom.getId(), accountTo.getId(), new BigDecimal(10))

        then:
        1 * repository.getAccount(accountFrom.getId()) >> accountFrom
        1 * repository.getAccount(accountTo.getId()) >> accountTo
        thrown BalanceNegativeException
    }

    def "thrown exception if negative amount is transferred"() {
        when:
        service.transferMoney("1", "2", new BigDecimal(-1))

        then:
        thrown NegativeTransferAmountException
    }

    def "throws an exception if account transferred money to itself"() {
        when:
        service.transferMoney("1", "1", new BigDecimal(10))

        then:
        thrown SelfTransferException
        0 * repository.updateAccount()
    }

}
